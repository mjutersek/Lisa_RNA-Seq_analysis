metas <- list(meta1, meta2)
# Test two different limma designs
designs <- c(
"~ 1 + Phase*Time + Reactor",
"~ 1 + Time + Reactor"
)
modes <- c(
"integrated",
"isolated"
)
# Specify the meta "level" column
condition <- "Phase"
report_dir <- here::here(
"demo_results",
"hyperparams_screen_reports"
)
# To remove the batch effect
meta_batch_column = "Reactor"
# Test out two different p-value thresholds (inner hyperparameter)
adj_pthresholds <- c(
0.05,
0.1
)
# Create a dataframe with combinations of spline parameters to test
# (every row a combo to test)
spline_test_configs <- data.frame(
# 'n' stands for natural cubic splines, b for B-splines.
spline_type = c("n", "n", "b", "b"),
# Degree is not applicable (NA) for natural splines.
degree = c(NA, NA, 2L, 4L),
# Degrees of freedom (DoF) to test.
# Higher dof means spline can fit more complex patterns.
dof = c(2L, 3L, 3L, 4L)
)
print(spline_test_configs)
SplineOmics::screen_limma_hyperparams(
splineomics = splineomics,
datas = datas,
datas_descr = datas_descr,
metas = metas,
designs = designs,
modes = modes,
spline_test_configs = spline_test_configs,
report_dir = report_dir,
adj_pthresholds = adj_pthresholds,
)
SplineOmics::screen_limma_hyperparams
splineomics <- SplineOmics::run_limma_splines(
splineomics
)
design <- gsub("Time", "X", design)
print(design)
designs <- gsub("Time", "X", designs)
gc()
.libPaths()
getwd()
installed_packages <- installed.packages()[, "Package"]
save(installed_packages, file = "installed_packages.RData")
install.packages("swirl")
library(swirl)
swirl()
5+7
x <- 5+7
y <- 56
y <- 56
y <- 3+53
len(y)
rm(list = ls(all = TRUE))
knitr::opts_chunk$set(dev = c("png"),
fig.align = "center",
fig.height = 8,
fig.width = 9,
fig.show = "hold",
results = "markup",
warning = FALSE, message = FALSE
)
rm(list = ls(all = TRUE))
set.seed(123456)
library("limma")
library("edgeR")
library("RColorBrewer")
library("ggplot2")
library("openxlsx")
library("data.table")
library("pheatmap")
setwd("~/GitHub/Lisa_RNA-Seq_analysis/04_Differential_expression/scripts")
fp <- file.path("..","input")
fp <- file.path("..","input","count_table")
fp <- file.path("..","input")
fn <- "featureCounts_all_multimap_counts_clean.txt"
file.path(fp,fn)
counts <- read.table(file.path(fp,fn), header=TRUE, sep="\t")
View(counts)
head(counts)
head(counts, n=c(10,4))
head(counts, n=c(10,4))
fp <- file.path("..","input")
fn <- "featureCounts_all_multimap_counts_clean.txt"
counts <- read.table(file.path(fp,fn), header=TRUE, sep="\t")
head(counts, n=c(10,4))
dim(counts)
View(counts)
knitr::opts_chunk$set(dev = c("png"),
fig.align = "center",
fig.height = 8,
fig.width = 9,
fig.show = "hold",
results = "markup",
warning = FALSE, message = FALSE
)
rm(list = ls(all = TRUE))
set.seed(123456)
colnames(counts) <- gsub("^\\.\\.output\\.", "", colnames(counts))
fp <- file.path("..","input")
fn <- "featureCounts_all_multimap_counts_clean.txt"
counts <- read.table(file.path(fp,fn), header=TRUE, sep="\t")
dim(counts)
colnames(counts) <- gsub("^\\.\\.output\\.", "", colnames(counts))
colnames(counts) <- gsub("\\.Aligned\\.sortedByCoord\\.out\\.bam$", "", colnames(counts))
colnames(counts) <- sub("^(([^_]+)_([^_]+)_([^_]+))_.*", "\\1", colnames(counts))
knitr::opts_chunk$set(dev = c("png"),
fig.align = "center",
fig.height = 8,
fig.width = 9,
fig.show = "hold",
results = "markup",
warning = FALSE, message = FALSE
)
rm(list = ls(all = TRUE))
set.seed(123456)
library("limma")
library("edgeR")
library("RColorBrewer")
library("ggplot2")
library("openxlsx")
library("data.table")
library("pheatmap")
fp <- file.path("..","input")
fn <- "featureCounts_all_multimap_counts_clean.txt"
counts <- read.table(file.path(fp,fn), header=TRUE, sep="\t")
dim(counts)
View(counts)
colnames(counts) <- gsub("^\\.\\.output\\.", "", colnames(counts))
colnames(counts) <- gsub("\\.Aligned\\.sortedByCoord\\.out\\.bam$", "", colnames(counts))
colnames(counts) <- sub("^(([^_]+)_([^_]+)_([^_]+))_.*", "\\1", colnames(counts))
fp <- file.path("..","input")
fn <- "featureCounts_all_multimap_counts_clean.txt"
counts <- read.table(file.path(fp,fn), header=TRUE, sep="\t")
dim(counts)
colnames(counts) <- gsub("^\\.\\.output\\.", "", colnames(counts))
colnames(counts) <- gsub("\\.Aligned\\.sortedByCoord\\.out\\.bam$", "", colnames(counts))
colnames(counts) <- sub("^(([^_]+)_([^_]+)_([^_]+))_.*", "\\1", colnames(counts))
colnames(counts) <- gsub("^\\.\\.output\\.", "", colnames(counts))
colnames(counts) <- gsub("\\.Aligned\\.sortedByCoord\\.out\\.bam$", "", colnames(counts))
colnames(counts) <- sub("^(([^_]+)_([^_]+)_([^_]+))_.*", "\\1", colnames(counts))
fp <- file.path("..")
fn <- "phenodata.txt"
pheno <- read.table(file.path(fp,fn), header=TRUE, sep="\t")
setwd("~/GitHub/Lisa_RNA-Seq_analysis/04_Differential_expression/scripts")
fp <- file.path("..")
fn <- "phenodata.txt"
pheno <- read.table(file.path(fp,fn), header=TRUE, sep="\t")
fp <- file.path("..",".")
fn <- "phenodata.txt"
pheno <- read.table(file.path(fp,fn), header=TRUE, sep="\t")
file.path(fp,fn)
fp <- file.path("..","..")
fn <- "phenodata.txt"
pheno <- read.table(file.path(fp,fn), header=TRUE, sep="\t")
View(pheno)
View(counts)
View(pheno)
ind <- match(pheno$sampleID, colnames(counts))
ind
View(pheno)
rownames(counts) <- counts$GeneID
counts <- counts[,-1]
counts <- counts[,-1]
counts <- counts[,1]
fp <- file.path("..","input")
fn <- "featureCounts_all_multimap_counts_clean.txt"
counts <- read.table(file.path(fp,fn), header=TRUE, sep="\t")
dim(counts)
colnames(counts) <- gsub("^\\.\\.output\\.", "", colnames(counts))
colnames(counts) <- gsub("\\.Aligned\\.sortedByCoord\\.out\\.bam$", "", colnames(counts))
colnames(counts) <- sub("^(([^_]+)_([^_]+)_([^_]+))_.*", "\\1", colnames(counts))
rownames(counts) <- counts$GeneID
c(1:10)
counts <- counts[,c(1:10)]
fp <- file.path("..","input")
fn <- "featureCounts_all_multimap_counts_clean.txt"
counts <- read.table(file.path(fp,fn), header=TRUE, sep="\t")
dim(counts)
colnames(counts) <- gsub("^\\.\\.output\\.", "", colnames(counts))
colnames(counts) <- gsub("\\.Aligned\\.sortedByCoord\\.out\\.bam$", "", colnames(counts))
colnames(counts) <- sub("^(([^_]+)_([^_]+)_([^_]+))_.*", "\\1", colnames(counts))
rownames(counts) <- counts$GeneID
counts <- counts[4,c(1:10)]
fp <- file.path("..","input")
fn <- "featureCounts_all_multimap_counts_clean.txt"
counts <- read.table(file.path(fp,fn), header=TRUE, sep="\t")
dim(counts)
colnames(counts) <- gsub("^\\.\\.output\\.", "", colnames(counts))
colnames(counts) <- gsub("\\.Aligned\\.sortedByCoord\\.out\\.bam$", "", colnames(counts))
colnames(counts) <- sub("^(([^_]+)_([^_]+)_([^_]+))_.*", "\\1", colnames(counts))
rownames(counts) <- counts$GeneID
counts <- counts[,-1]
ind <- match(pheno$sampleID, colnames(counts))
ind
all(phenodata_sal$sampleID == colnames(counts_sal)[ind])
all(phenodata$sampleID == colnames(counts)[ind])
all(pheno$sampleID == colnames(counts)[ind])
pheno$sampleID == colnames(counts)
pheno$sampleID == colnames(counts)[ind]
counts <- counts[,ind]
all(pheno$sampleID == colnames(counts))
View(pheno)
group <- factor(pheno$Biological.group, levels = unique(pheno$Biological.group))
levels(group)
group
## Create a DGEList object
data <- edgeR::DGEList(counts = counts, group = group)
data$samples
head(data$counts, n=c(5,5))
keep <- filterByExpr(data, group=group, min.count=50, min.total.count=100)
head(keep)
data_f <- data[keep, ,keep.lib.sizes=TRUE]
dim(data$counts)
dim(data_f$counts)
View(data)
nsamples <- ncol(counts)
lcpm <- log(as.matrix(data$counts),2)
View(lcpm)
opar <- par()
par(mfrow=c(1,2), cex = 0.6)
nsamples <- ncol(counts)
lcpm <- log(as.matrix(data$counts),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.1), las=2, main="", xlab="")
title(main="A. Raw STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
lcpm <- log(as.matrix(data_f$counts),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.2), las=2, main="", xlab="")
title(main="B. Filtered STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
par(opar)
opar <- par()
par(mfrow=c(1,2), cex = 0.6)
nsamples <- ncol(counts)
lcpm <- log(as.matrix(data$counts),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.2), las=2, main="", xlab="")
title(main="A. Raw STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
lcpm <- log(as.matrix(data_f$counts),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.2), las=2, main="", xlab="")
title(main="B. Filtered STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
par(opar)
opar <- par()
par(mfrow=c(1,2), cex = 0.6)
nsamples <- ncol(counts)
lcpm <- log(as.matrix(data$counts),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.12), las=2, main="", xlab="")
title(main="A. Raw STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
lcpm <- log(as.matrix(data_f$counts),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.2), las=2, main="", xlab="")
title(main="B. Filtered STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
par(opar)
opar <- par()
par(mfrow=c(1,2), cex = 0.6)
nsamples <- ncol(counts)
lcpm <- log(as.matrix(data$counts),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.12), xlim=c(0,5) las=2, main="", xlab="")
opar <- par()
par(mfrow=c(1,2), cex = 0.6)
nsamples <- ncol(counts)
lcpm <- log(as.matrix(data$counts),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.12), xlim=c(0,5), las=2, main="", xlab="")
title(main="A. Raw STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
lcpm <- log(as.matrix(data_f$counts),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.2), las=2, main="", xlab="")
title(main="B. Filtered STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
par(opar)
lcpm <- log(as.matrix(data$counts),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.12), xlim=c(0,5), las=2, main="", xlab="")
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.12), las=2, main="", xlab="")
title(main="A. Raw STAR counts", xlab="log2(counts)")
lcpm <- log(as.matrix(data$counts),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.12), las=2, main="", xlab="")
title(main="A. Raw STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
opar <- par()
par(mfrow=c(1,2), cex = 0.6)
nsamples <- ncol(counts)
lcpm <- log(as.matrix(data$counts+1),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.12), las=2, main="", xlab="")
title(main="A. Raw STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
lcpm <- log(as.matrix(data_f$counts+1),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.2), las=2, main="", xlab="")
title(main="B. Filtered STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
par(opar)
opar <- par()
par(mfrow=c(1,2), cex = 0.6)
nsamples <- ncol(counts)
lcpm <- log(as.matrix(data$counts+1),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.2), las=2, main="", xlab="")
title(main="A. Raw STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
lcpm <- log(as.matrix(data_f$counts+1),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.2), las=2, main="", xlab="")
title(main="B. Filtered STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
par(opar)
opar <- par()
par(mfrow=c(1,2), cex = 0.6)
nsamples <- ncol(counts)
lcpm <- log(as.matrix(data$counts+1),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.5), las=2, main="", xlab="")
title(main="A. Raw STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
lcpm <- log(as.matrix(data_f$counts+1),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.2), las=2, main="", xlab="")
title(main="B. Filtered STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
par(opar)
opar <- par()
par(mfrow=c(1,2), cex = 0.6)
nsamples <- ncol(counts)
lcpm <- log(as.matrix(data$counts+1),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.8), las=2, main="", xlab="")
title(main="A. Raw STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
lcpm <- log(as.matrix(data_f$counts+1),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.2), las=2, main="", xlab="")
title(main="B. Filtered STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
par(opar)
keep <- filterByExpr(data, group=group, min.count=50, min.total.count=200)
data_f <- data[keep, ,keep.lib.sizes=TRUE]
dim(data$counts)
dim(data_f$counts)
keep <- filterByExpr(data, group=group, min.count=100, min.total.count=200)
data_f <- data[keep, ,keep.lib.sizes=TRUE]
dim(data$counts)
dim(data_f$counts)
opar <- par()
par(mfrow=c(1,2), cex = 0.6)
nsamples <- ncol(counts)
lcpm <- log(as.matrix(data$counts+1),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.8), las=2, main="", xlab="")
title(main="A. Raw STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
lcpm <- log(as.matrix(data_f$counts+1),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.2), las=2, main="", xlab="")
title(main="B. Filtered STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
par(opar)
data_f <- calcNormFactors(data_f)
data_f$samples
opar <- par()
par(mfrow=c(1,2), cex = 0.6)
nsamples <- ncol(counts)
lcpm <- log(as.matrix(data_f$counts+1),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.2), las=2, main="", xlab="")
title(main="B. Filtered STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
lcpm <- cpm(data_f$counts, log=TRUE)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.8), las=2, main="", xlab="")
title(main="A. Raw STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
par(opar)
opar <- par()
par(mfrow=c(1,2), cex = 0.6)
nsamples <- ncol(counts)
lcpm <- log(as.matrix(data_f$counts+1),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.2), las=2, main="", xlab="")
title(main="B. Filtered STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
lcpm <- cpm(data_f$counts, log=TRUE)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.21), las=2, main="", xlab="")
title(main="A. Raw STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
par(opar)
opar <- par()
par(mfrow=c(1,2), cex = 0.6)
nsamples <- ncol(counts)
lcpm <- log(as.matrix(data_f$counts+1),2)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.2), las=2, main="", xlab="")
title(main="B. Filtered STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
lcpm <- cpm(data_f$counts, log=TRUE)
plot(density(lcpm), col="red", lwd=2, ylim=c(0,0.21), las=2, main="", xlab="")
title(main="A. Normalised STAR counts", xlab="log2(counts)")
abline(v=0, lty=3)
for (i in 2:nsamples){
den <- density(lcpm[,i])
lines(den$x, den$y, col="red", lwd=2)
}
par(opar)
opar <- par()
par(mfrow=c(1,3), cex = 0.6)
boxplot(log(data$counts+1,2), las=2, ylab="log2(counts)", col="red", main="Before filtering")
boxplot(log(data_f$counts+1,2), las=2, ylab="log2(counts)", col="red", main="After filterinf")
boxplot(cpm(data_f$counts, log=TRUE), ylab="log2(counts)", col="red", las=2, main="After normalisation")
par(opar)
opar <- par()
par(mfrow=c(1,3), cex = 0.6)
boxplot(log(data$counts+1,2), las=2, ylab="log2(counts)", col="red", main="Before filtering")
boxplot(log(data_f$counts+1,2), las=2, ylab="log2(counts)", col="red", main="After filterinf")
boxplot(cpm(data_f$counts, log=TRUE), ylab="log2(counts)", col="red", las=2, main="After normalisation")
par(opar)
